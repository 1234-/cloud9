<?xml version="1.0" encoding="UTF-8"?>
<javascript>
    <class type="Array" superclass="Object">
        <description></description>
        <properties/>
        <methods>
            <method name="indexOf" scope="instance">
                <description>Checks whether or not the specified object exists in the array.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>The object to check for</description>
                    </parameter>
                </parameters>
            </method>
            <method name="remove" scope="instance">
                <description>Removes the specified object from the array.  If the object is not found nothing happens.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>The object to remove</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Date" superclass="Object">
        <description>The date parsing and format syntax is a subset of
            &lt;a href=&quot;http://www.php.net/date&quot;&gt;PHP's date() function&lt;/a&gt;, and the formats that are
            supported will provide results equivalent to their PHP versions.
            The following is a list of all currently supported formats:
            &lt;pre&gt;Format  Description                                                               Example returned values
            ------  -----------------------------------------------------------------------   -----------------------
            d     Day of the month, 2 digits with leading zeros                             01 to 31
            D     A short textual representation of the day of the week                     Mon to Sun
            j     Day of the month without leading zeros                                    1 to 31
            l     A full textual representation of the day of the week                      Sunday to Saturday
            N     ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)
            S     English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j
            w     Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)
            z     The day of the year (starting from 0)                                     0 to 364 (365 in leap years)
            W     ISO-8601 week number of year, weeks starting on Monday                    01 to 53
            F     A full textual representation of a month, such as January or March        January to December
            m     Numeric representation of a month, with leading zeros                     01 to 12
            M     A short textual representation of a month                                 Jan to Dec
            n     Numeric representation of a month, without leading zeros                  1 to 12
            t     Number of days in the given month                                         28 to 31
            L     Whether it's a leap year                                                  1 if it is a leap year, 0 otherwise.
            o     ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004
            belongs to the previous or next year, that year is used instead)
            Y     A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003
            y     A two digit representation of a year                                      Examples: 99 or 03
            a     Lowercase Ante meridiem and Post meridiem                                 am or pm
            A     Uppercase Ante meridiem and Post meridiem                                 AM or PM
            g     12-hour format of an hour without leading zeros                           1 to 12
            G     24-hour format of an hour without leading zeros                           0 to 23
            h     12-hour format of an hour with leading zeros                              01 to 12
            H     24-hour format of an hour with leading zeros                              00 to 23
            i     Minutes, with leading zeros                                               00 to 59
            s     Seconds, with leading zeros                                               00 to 59
            u     Milliseconds, with leading zeroes (arbitrary number of digits allowed)    Examples:
            001 (i.e. 1ms) or
            100 (i.e. 100ms) or
            999 (i.e. 999ms) or
            999876543210 (i.e. 999.876543210ms)
            O     Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030
            P     Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00
            T     Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...
            Z     Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400
            c     ISO 8601 date (note: milliseconds, if present, must be specified with     Examples:
            at least 1 digit. There is no limit to how many digits the millisecond    2007-04-17T15:19:21+08:00 or
            value may contain. see http://www.w3.org/TR/NOTE-datetime for more info)  2008-03-16T16:18:22Z or
            2009-02-15T17:17:23.9+01:00 or
            2010-01-14T18:16:24,999876543-07:00
            U     Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463&lt;/pre&gt;
            Example usage (note that you must escape format specifiers with '\\' to render them as character literals):
            &lt;pre&gt;&lt;code&gt;// Sample date:
            // 'Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)'

            var dt = new Date('1/10/2007 03:05:01 PM GMT-0600');
            document.write(dt.format('Y-m-d'));                           // 2007-01-10
            document.write(dt.format('F j, Y, g:i a'));                   // January 10, 2007, 3:05 pm
            document.write(dt.format('l, \\t\\he jS \\of F Y h:i:s A'));  // Wednesday, the 10th of January 2007 03:05:01 PM&lt;/code&gt;&lt;/pre&gt;
            Here are some standard date/time patterns that you might find helpful.  They
            are not part of the source of Date.js, but to use them you can simply copy this
            block of code into any script that is included after Date.js and they will also become
            globally available on the Date object.  Feel free to add or remove patterns as needed in your code.
            &lt;pre&gt;&lt;code&gt;Date.patterns = {
            ISO8601Long:&quot;Y-m-d H:i:s&quot;,
            ISO8601Short:&quot;Y-m-d&quot;,
            ShortDate: &quot;n/j/Y&quot;,
            LongDate: &quot;l, F d, Y&quot;,
            FullDateTime: &quot;l, F d, Y g:i:s A&quot;,
            MonthDay: &quot;F d&quot;,
            ShortTime: &quot;g:i A&quot;,
            LongTime: &quot;g:i:s A&quot;,
            SortableDateTime: &quot;Y-m-d\\TH:i:s&quot;,
            UniversalSortableDateTime: &quot;Y-m-d H:i:sO&quot;,
            YearMonth: &quot;F, Y&quot;
            };&lt;/code&gt;&lt;/pre&gt;
            Example usage:
            &lt;pre&gt;&lt;code&gt;var dt = new Date();
        document.write(dt.format(Date.patterns.ShortDate));&lt;/code&gt;&lt;/pre&gt;</description>
        <properties>
            <property name="MILLI" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="SECOND" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="MINUTE" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="HOUR" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="DAY" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="MONTH" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="YEAR" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="dayNames" type="Array" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; An array of textual day names.
                    Override these values for international dates.
                    Example:
                    &lt;pre&gt;&lt;code&gt;Date.dayNames = [
                    'SundayInYourLang',
                    'MondayInYourLang',
                    ...
                ];&lt;/code&gt;&lt;/pre&gt;</description>
            </property>
            <property name="monthNames" type="Array" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; An array of textual month names.
                    Override these values for international dates.
                    Example:
                    &lt;pre&gt;&lt;code&gt;Date.monthNames = [
                    'JanInYourLang',
                    'FebInYourLang',
                    ...
                ];&lt;/code&gt;&lt;/pre&gt;</description>
            </property>
            <property name="monthNumbers" type="Object" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; An object hash of zero-based javascript month numbers (with short month names as keys. note: keys are case-sensitive).
                    Override these values for international dates.
                    Example:
                    &lt;pre&gt;&lt;code&gt;Date.monthNumbers = {
                    'ShortJanNameInYourLang':0,
                    'ShortFebNameInYourLang':1,
                    ...
                };&lt;/code&gt;&lt;/pre&gt;</description>
            </property>
            <property name="formatCodes" type="Object" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; The base format-code to formatting-function hashmap used by the &lt;a ext:cls=&quot;Date&quot; ext:member=&quot;format&quot; href=&quot;output/Date.html#format&quot;&gt;format&lt;/a&gt; method.
                    Formatting functions are strings (or functions which return strings) which
                    will return the appropriate value when evaluated in the context of the Date object
                    from which the &lt;a ext:cls=&quot;Date&quot; ext:member=&quot;format&quot; href=&quot;output/Date.html#format&quot;&gt;format&lt;/a&gt; method is called.
                    Add to / override these mappings for custom date formatting.
                    Note: Date.format() treats characters as literals if an appropriate mapping cannot be found.
                    Example:
                    &lt;pre&gt;&lt;code&gt;Date.formatCodes.x = &quot;String.leftPad(this.getDate(), 2, '0')&quot;;
                (new Date()).format(&quot;X&quot;); // returns the current day of the month&lt;/code&gt;&lt;/pre&gt;</description>
            </property>
        </properties>
        <methods>
            <method name="getShortMonthName" scope="static">
                <description>&amp;lt;static&amp;gt; Get the short month name for the given month number.
                Override this function for international dates.</description>
                <parameters>
                    <parameter name="month" type="Number" usage="required">
                        <description>A zero-based javascript month number.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getShortDayName" scope="static">
                <description>&amp;lt;static&amp;gt; Get the short day name for the given day number.
                Override this function for international dates.</description>
                <parameters>
                    <parameter name="day" type="Number" usage="required">
                        <description>A zero-based javascript day number.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getMonthNumber" scope="static">
                <description>&amp;lt;static&amp;gt; Get the zero-based javascript month number for the given short/full month name.
                Override this function for international dates.</description>
                <parameters>
                    <parameter name="name" type="String" usage="required">
                        <description>The short/full month name.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="parseDate" scope="static">
                <description>&amp;lt;static&amp;gt; Parses the passed string using the specified format. Note that this function expects dates in normal calendar
                    format, meaning that months are 1-based (1 = January) and not zero-based like in JavaScript dates.  Any part of
                    the date format that is not specified will default to the current date value for that part.  Time parts can also
                    be specified, but default to 0.  Keep in mind that the input date string must precisely match the specified format
                    string or the parse operation will fail.
                    Example Usage:
                    &lt;pre&gt;&lt;code&gt;//dt = Fri May 25 2007 (current date)
                    var dt = new Date();

                    //dt = Thu May 25 2006 (today's month/day in 2006)
                    dt = Date.parseDate(&quot;2006&quot;, &quot;Y&quot;);

                    //dt = Sun Jan 15 2006 (all date parts specified)
                    dt = Date.parseDate(&quot;2006-01-15&quot;, &quot;Y-m-d&quot;);

                    //dt = Sun Jan 15 2006 15:20:01 GMT-0600 (CST)
                dt = Date.parseDate(&quot;2006-01-15 3:20:01 PM&quot;, &quot;Y-m-d h:i:s A&quot; );&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="input" type="String" usage="required">
                        <description>The unparsed date as a string.</description>
                    </parameter>
                    <parameter name="format" type="String" usage="required">
                        <description>The format the date is in.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getTimezone" scope="instance">
                <description>Get the timezone abbreviation of the current date (equivalent to the format specifier 'T').
                    Note: The date string returned by the javascript Date object's toString() method varies
                    between browsers (e.g. FF vs IE) and system region settings (e.g. IE in Asia vs IE in America).
                    For a given date string e.g. &quot;Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)&quot;,
                    getTimezone() first tries to get the timezone abbreviation from between a pair of parentheses
                    (which may or may not be present), failing which it proceeds to get the timezone abbreviation
                from the GMT offset portion of the date string.</description>
                <parameters/>
            </method>
            <method name="getGMTOffset" scope="instance">
                <description>Get the offset from GMT of the current date (equivalent to the format specifier 'O').</description>
                <parameters>
                    <parameter name="colon" type="Boolean" usage="required">
                        <description>true to separate the hours and minutes with a colon (defaults to false).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getDayOfYear" scope="instance">
                <description>Get the numeric day number of the year, adjusted for leap year.</description>
                <parameters/>
            </method>
            <method name="getWeekOfYear" scope="instance">
                <description>Get the numeric ISO-8601 week number of the year.
                (equivalent to the format specifier 'W', but without a leading zero).</description>
                <parameters/>
            </method>
            <method name="isLeapYear" scope="instance">
                <description>Whether or not the current date is in a leap year.</description>
                <parameters/>
            </method>
            <method name="getFirstDayOfMonth" scope="instance">
                <description>Get the first day of the current month, adjusted for leap year.  The returned value
                    is the numeric day index within the week (0-6) which can be used in conjunction with
                    the &lt;a ext:cls=&quot;Date&quot; ext:member=&quot;monthNames&quot; href=&quot;output/Date.html#monthNames&quot;&gt;monthNames&lt;/a&gt; array to retrieve the textual day name.
                    Example:
                    &lt;pre&gt;&lt;code&gt;var dt = new Date('1/10/2007');
                document.write(Date.dayNames[dt.getFirstDayOfMonth()]); //output: 'Monday'&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters/>
            </method>
            <method name="getLastDayOfMonth" scope="instance">
                <description>Get the last day of the current month, adjusted for leap year.  The returned value
                    is the numeric day index within the week (0-6) which can be used in conjunction with
                    the &lt;a ext:cls=&quot;Date&quot; ext:member=&quot;monthNames&quot; href=&quot;output/Date.html#monthNames&quot;&gt;monthNames&lt;/a&gt; array to retrieve the textual day name.
                    Example:
                    &lt;pre&gt;&lt;code&gt;var dt = new Date('1/10/2007');
                document.write(Date.dayNames[dt.getLastDayOfMonth()]); //output: 'Wednesday'&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters/>
            </method>
            <method name="getFirstDateOfMonth" scope="instance">
                <description>Get the date of the first day of the month in which this date resides.</description>
                <parameters/>
            </method>
            <method name="getLastDateOfMonth" scope="instance">
                <description>Get the date of the last day of the month in which this date resides.</description>
                <parameters/>
            </method>
            <method name="getDaysInMonth" scope="instance">
                <description>Get the number of days in the current month, adjusted for leap year.</description>
                <parameters/>
            </method>
            <method name="getSuffix" scope="instance">
                <description>Get the English ordinal suffix of the current day (equivalent to the format specifier 'S').</description>
                <parameters/>
            </method>
            <method name="clone" scope="instance">
                <description>Creates and returns a new Date instance with the exact same date value as the called instance.
                    Dates are copied and passed by reference, so if a copied date variable is modified later, the original
                    variable will also be changed.  When the intention is to create a new variable that will not
                    modify the original instance, you should create a clone.
                    Example of correctly cloning a date:
                    &lt;pre&gt;&lt;code&gt;//wrong way:
                    var orig = new Date('10/1/2006');
                    var copy = orig;
                    copy.setDate(5);
                    document.write(orig);  //returns 'Thu Oct 05 2006'!

                    //correct way:
                    var orig = new Date('10/1/2006');
                    var copy = orig.clone();
                    copy.setDate(5);
                document.write(orig);  //returns 'Thu Oct 01 2006'&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters/>
            </method>
            <method name="clearTime" scope="instance">
                <description>Clears any time information from this date.</description>
                <parameters>
                    <parameter name="clone" type="Boolean" usage="required">
                        <description>true to create a clone of this date, clear the time and return it (defaults to false).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="add" scope="instance">
                <description>Provides a convenient method of performing basic date arithmetic.  This method
                    does not modify the Date instance being called - it creates and returns
                    a new Date instance containing the resulting date value.
                    Examples:
                    &lt;pre&gt;&lt;code&gt;//Basic usage:
                    var dt = new Date('10/29/2006').add(Date.DAY, 5);
                    document.write(dt); //returns 'Fri Oct 06 2006 00:00:00'

                    //Negative values will subtract correctly:
                    var dt2 = new Date('10/1/2006').add(Date.DAY, -5);
                    document.write(dt2); //returns 'Tue Sep 26 2006 00:00:00'

                    //You can even chain several calls together in one line!
                    var dt3 = new Date('10/1/2006').add(Date.DAY, 5).add(Date.HOUR, 8).add(Date.MINUTE, -30);
                document.write(dt3); //returns 'Fri Oct 06 2006 07:30:00'&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="interval" type="String" usage="required">
                        <description>A valid date interval enum value.</description>
                    </parameter>
                    <parameter name="value" type="Number" usage="required">
                        <description>The amount to add to the current date.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="between" scope="instance">
                <description>Checks if this date falls on or between the given start and end dates.</description>
                <parameters>
                    <parameter name="start" type="Date" usage="required">
                        <description>Start date</description>
                    </parameter>
                    <parameter name="end" type="Date" usage="required">
                        <description>End date</description>
                    </parameter>
                </parameters>
            </method>
            <method name="format" scope="instance">
                <description>Formats a date given the supplied format string.</description>
                <parameters>
                    <parameter name="format" type="String" usage="required">
                        <description>The format string.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getElapsed" scope="instance">
                <description>Returns the number of milliseconds between this date and date</description>
                <parameters>
                    <parameter name="date" type="Date" usage="optional">
                        <description>(optional) Defaults to now</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
</javascript>
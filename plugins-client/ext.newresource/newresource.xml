<a:application xmlns:a="http://ajax.org/2005/aml">
    <a:window
      id        = "winNewFileTemplate"
      title     = "New from Template"
      icon      = ""
      center    = "true"
      width     = "350"
      height    = "300"
      skin      = "bk-window2"
      resizable = "true"
      kbclose   = "true"
      buttons   = "close"
      draggable = "true">
        <a:vbox padding="10" anchors="0 0 0 0">

            <a:list id="lstFileTemplates"
              model     = "mdlFileTemplates"
              flex      = "1"
              margin    = "10 10 10 10"
              caption   = "[@caption]"
              icon      = "[@icon]"
              class     = "noscrollbar newFileTemplate"
              scrollbar = "sbShared 12 12 55"
              each      = "item"
              eachvalue = "[@name]"
              style     = "overflow:hidden; background: white; border: 1px white"
              skin      = "tree"
              onafterchoose = "
                btnFileTemplateSave.dispatchEvent('click');
              ">
              <a:each match="[item]">
                  <a:caption  value="[@caption]" />
                  <a:css match="[item]" value="{require('core/util').getFileIcon(%[.])}" />
              </a:each>
            </a:list>
            <a:hbox pack="end" padding="7" edge="10">
                <a:button id="btnFileTemplateSave" width="80" default="2"
                  class="btn-green" skin="btn-default-css3" caption="Create"
                  onclick="
                    require('ext/newresource/newresource').newfile(
                        '.' + lstFileTemplates.value,
                        lstFileTemplates.selected.firstChild.nodeValue
                    );
                    winNewFileTemplate.hide();
                  "/>
                <a:button id="btnFileTemplateCancel" skin="btn-default-css3" width="80"
                  onclick="winNewFileTemplate.hide()">Cancel</a:button>
            </a:hbox>
        </a:vbox>
    </a:window>

    <a:model id="mdlFileTemplates">
        <templates>
            <item name=".txt" icon="file_tree/file_tree.png" css="page_white_text" caption="Text file"><![CDATA[]]></item>
            <item name=".js" icon="file_tree/file_tree.png" css="page_white_code" caption="JavaScript file"><![CDATA[]]></item>
            <item name=".js" icon="file_tree/file_tree.png" css="page_white_code" caption="Unit Test"><![CDATA["use strict";
require("./support/paths");

var assert = require("assert");
//var module = require("./module");

module.exports = {

    "test untitled 1" : function() {
        //assert.equal(!true, false);
    }

};

if (typeof module !== "undefined" && module === require.main) {
    require("asyncjs").test.testcase(module.exports).exec()
}]]></item>
            <item name=".stest" icon="file_tree/file_tree.png" css="page_white_code" caption="Selenium Test"><![CDATA[{}]]></item>
            <item name=".coffee" icon="file_tree/file_tree.png" css="page_white_code" caption="CoffeeScript file"><![CDATA[]]></item>
            <item name=".html" icon="file_tree/file_tree.png" css="html" caption="HTML file"><![CDATA[<!DOCTYPE html>
<html>
    <head>
        <title> </title>
    </head>
    <body>

    </body>
</html>
]]></item>
            <item name=".xml" icon="file_tree/file_tree.png" css="page_white_code_red" caption="XML file"><![CDATA[]]></item>
            <item name=".xq" icon="file_tree/file_tree.png" css="page_white_code" caption="XQuery file"><![CDATA[xquery version "1.0";
let $message := "Hello World!"
return <results>
  <message>{$message}</message>
</results>]]></item>
            <item name=".css" icon="file_tree/file_tree.png" css="css" caption="CSS file"><![CDATA[]]></item>
            <item name=".scss" icon="file_tree/file_tree.png" css="css" caption="SCSS file"><![CDATA[]]></item>
            <item name=".svg" icon="file_tree/file_tree.png" css="page_white_picture" caption="SVG file"><![CDATA[]]></item>
            <item name=".py" icon="file_tree/file_tree.png" css="page_white_code" caption="Python file"><![CDATA[]]></item>
            <item name=".php" icon="file_tree/file_tree.png" css="page_white_php" caption="PHP file"><![CDATA[<?php

?>]]></item>
            <item name=".rb" icon="file_tree/file_tree.png" css="page_white_ruby" caption="Ruby file"><![CDATA[]]></item>
            <item name=".mli" icon="file_tree/file_tree.png" css="page_white_code" caption="OCaml file"><![CDATA[]]></item>
            <item name=".clj" icon="file_tree/file_tree.png" css="page_white_code" caption="Clojure file"><![CDATA[]]></item>
            <item name=".md" icon="file_tree/file_tree.png" css="page_white_text" caption="Markdown"><![CDATA[]]></item>
            <item name=".js" icon="file_tree/file_tree.png" css="page_white_code" caption="Express file"><![CDATA[// *******************************************************
// expressjs template
//
// assumes: npm install express
// defaults to jade engine, install others as needed
//
// assumes these subfolders:
//   public/
//   public/javascripts/
//   public/stylesheets/
//   views/
//
var express = require('express');
var app = module.exports = express.createServer();
var viewEngine = 'jade'; // modify for your view engine
// Configuration
app.configure(function(){
  app.set('views', __dirname + '/views');
  app.set('view engine', viewEngine);
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express.static(__dirname + '/public'));
});
app.configure('development', function(){
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});
app.configure('production', function(){
  app.use(express.errorHandler());
});
// *******************************************************
]]></item>
            <item name=".js" icon="file_tree/file_tree.png" css="page_white_code" caption="Node.js web server"><![CDATA[var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/plain'});
  res.end('Hello World from Cloud9\n');
}).listen(process.env.PORT);
]]>
            </item>
        </templates>
    </a:model>
</a:application>